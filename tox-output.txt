py36-dateutil26 installed: atomicwrites==1.3.0,attrs==19.1.0,importlib-metadata==0.18,more-itertools==7.1.0,packaging==19.0,pluggy==0.12.0,py==1.8.0,pyparsing==2.4.0,pytest==5.0.1,python-dateutil==2.6.1,six==1.12.0,wcwidth==0.1.7,zipp==0.5.2
py36-dateutil26 run-test-pre: PYTHONHASHSEED='4015604952'
py36-dateutil26 run-test: commands[0] | pytest
============================= test session starts ==============================
platform darwin -- Python 3.6.6, pytest-5.0.1, py-1.8.0, pluggy-0.12.0
cachedir: .tox/py36-dateutil26/.pytest_cache
rootdir: /Users/brian/Code/dateutil-parse-test
collected 1 item

test_dateutil.py F                                                       [100%]

=================================== FAILURES ===================================
_________________________________ test_parser __________________________________

    def test_parser():
>       assert parse('23APR2019') == datetime(2019, 4, 23)

test_dateutil.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/py36-dateutil26/lib/python3.6/site-packages/dateutil/parser.py:1182: in parse
    return DEFAULTPARSER.parse(timestr, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dateutil.parser.parser object at 0x10ed0af28>, timestr = '23APR2019'
default = datetime.datetime(2019, 7, 20, 0, 0), ignoretz = False, tzinfos = None
kwargs = {}, res = None, skipped_tokens = None

    def parse(self, timestr, default=None, ignoretz=False, tzinfos=None, **kwargs):
        """
        Parse the date/time string into a :class:`datetime.datetime` object.
    
        :param timestr:
            Any date/time string using the supported formats.
    
        :param default:
            The default datetime object, if this is a datetime object and not
            ``None``, elements specified in ``timestr`` replace elements in the
            default object.
    
        :param ignoretz:
            If set ``True``, time zones in parsed strings are ignored and a
            naive :class:`datetime.datetime` object is returned.
    
        :param tzinfos:
            Additional time zone names / aliases which may be present in the
            string. This argument maps time zone names (and optionally offsets
            from those time zones) to time zones. This parameter can be a
            dictionary with timezone aliases mapping time zone names to time
            zones or a function taking two parameters (``tzname`` and
            ``tzoffset``) and returning a time zone.
    
            The timezones to which the names are mapped can be an integer
            offset from UTC in minutes or a :class:`tzinfo` object.
    
            .. doctest::
               :options: +NORMALIZE_WHITESPACE
    
                >>> from dateutil.parser import parse
                >>> from dateutil.tz import gettz
                >>> tzinfos = {"BRST": -10800, "CST": gettz("America/Chicago")}
                >>> parse("2012-01-19 17:21:00 BRST", tzinfos=tzinfos)
                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -10800))
                >>> parse("2012-01-19 17:21:00 CST", tzinfos=tzinfos)
                datetime.datetime(2012, 1, 19, 17, 21,
                                  tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))
    
            This parameter is ignored if ``ignoretz`` is set.
    
        :param **kwargs:
            Keyword arguments as passed to ``_parse()``.
    
        :return:
            Returns a :class:`datetime.datetime` object or, if the
            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the
            first element being a :class:`datetime.datetime` object, the second
            a tuple containing the fuzzy tokens.
    
        :raises ValueError:
            Raised for invalid or unknown string format, if the provided
            :class:`tzinfo` is not in a valid format, or if an invalid date
            would be created.
    
        :raises TypeError:
            Raised for non-string or character stream input.
    
        :raises OverflowError:
            Raised if the parsed date exceeds the largest valid C integer on
            your system.
        """
    
        if default is None:
            default = datetime.datetime.now().replace(hour=0, minute=0,
                                                      second=0, microsecond=0)
    
        res, skipped_tokens = self._parse(timestr, **kwargs)
    
        if res is None:
>           raise ValueError("Unknown string format")
E           ValueError: Unknown string format

.tox/py36-dateutil26/lib/python3.6/site-packages/dateutil/parser.py:559: ValueError
=========================== 1 failed in 0.08 seconds ===========================
ERROR: InvocationError for command /Users/brian/Code/dateutil-parse-test/.tox/py36-dateutil26/bin/pytest (exited with code 1)
py36-dateutil27 installed: atomicwrites==1.3.0,attrs==19.1.0,importlib-metadata==0.18,more-itertools==7.1.0,packaging==19.0,pluggy==0.12.0,py==1.8.0,pyparsing==2.4.0,pytest==5.0.1,python-dateutil==2.7.5,six==1.12.0,wcwidth==0.1.7,zipp==0.5.2
py36-dateutil27 run-test-pre: PYTHONHASHSEED='4015604952'
py36-dateutil27 run-test: commands[0] | pytest
============================= test session starts ==============================
platform darwin -- Python 3.6.6, pytest-5.0.1, py-1.8.0, pluggy-0.12.0
cachedir: .tox/py36-dateutil27/.pytest_cache
rootdir: /Users/brian/Code/dateutil-parse-test
collected 1 item

test_dateutil.py .                                                       [100%]

=========================== 1 passed in 0.01 seconds ===========================
py36-dateutil28 installed: atomicwrites==1.3.0,attrs==19.1.0,importlib-metadata==0.18,more-itertools==7.1.0,packaging==19.0,pluggy==0.12.0,py==1.8.0,pyparsing==2.4.0,pytest==5.0.1,python-dateutil==2.8.0,six==1.12.0,wcwidth==0.1.7,zipp==0.5.2
py36-dateutil28 run-test-pre: PYTHONHASHSEED='4015604952'
py36-dateutil28 run-test: commands[0] | pytest
============================= test session starts ==============================
platform darwin -- Python 3.6.6, pytest-5.0.1, py-1.8.0, pluggy-0.12.0
cachedir: .tox/py36-dateutil28/.pytest_cache
rootdir: /Users/brian/Code/dateutil-parse-test
collected 1 item

test_dateutil.py .                                                       [100%]

=========================== 1 passed in 0.02 seconds ===========================
py37-dateutil26 installed: atomicwrites==1.3.0,attrs==19.1.0,importlib-metadata==0.18,more-itertools==7.1.0,packaging==19.0,pluggy==0.12.0,py==1.8.0,pyparsing==2.4.0,pytest==5.0.1,python-dateutil==2.6.1,six==1.12.0,wcwidth==0.1.7,zipp==0.5.2
py37-dateutil26 run-test-pre: PYTHONHASHSEED='4015604952'
py37-dateutil26 run-test: commands[0] | pytest
============================= test session starts ==============================
platform darwin -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0
cachedir: .tox/py37-dateutil26/.pytest_cache
rootdir: /Users/brian/Code/dateutil-parse-test
collected 1 item

test_dateutil.py F                                                       [100%]

=================================== FAILURES ===================================
_________________________________ test_parser __________________________________

    def test_parser():
>       assert parse('23APR2019') == datetime(2019, 4, 23)

test_dateutil.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/py37-dateutil26/lib/python3.7/site-packages/dateutil/parser.py:1182: in parse
    return DEFAULTPARSER.parse(timestr, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dateutil.parser.parser object at 0x1052e0510>, timestr = '23APR2019'
default = datetime.datetime(2019, 7, 20, 0, 0), ignoretz = False, tzinfos = None
kwargs = {}, res = None, skipped_tokens = None

    def parse(self, timestr, default=None, ignoretz=False, tzinfos=None, **kwargs):
        """
        Parse the date/time string into a :class:`datetime.datetime` object.
    
        :param timestr:
            Any date/time string using the supported formats.
    
        :param default:
            The default datetime object, if this is a datetime object and not
            ``None``, elements specified in ``timestr`` replace elements in the
            default object.
    
        :param ignoretz:
            If set ``True``, time zones in parsed strings are ignored and a
            naive :class:`datetime.datetime` object is returned.
    
        :param tzinfos:
            Additional time zone names / aliases which may be present in the
            string. This argument maps time zone names (and optionally offsets
            from those time zones) to time zones. This parameter can be a
            dictionary with timezone aliases mapping time zone names to time
            zones or a function taking two parameters (``tzname`` and
            ``tzoffset``) and returning a time zone.
    
            The timezones to which the names are mapped can be an integer
            offset from UTC in minutes or a :class:`tzinfo` object.
    
            .. doctest::
               :options: +NORMALIZE_WHITESPACE
    
                >>> from dateutil.parser import parse
                >>> from dateutil.tz import gettz
                >>> tzinfos = {"BRST": -10800, "CST": gettz("America/Chicago")}
                >>> parse("2012-01-19 17:21:00 BRST", tzinfos=tzinfos)
                datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -10800))
                >>> parse("2012-01-19 17:21:00 CST", tzinfos=tzinfos)
                datetime.datetime(2012, 1, 19, 17, 21,
                                  tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))
    
            This parameter is ignored if ``ignoretz`` is set.
    
        :param **kwargs:
            Keyword arguments as passed to ``_parse()``.
    
        :return:
            Returns a :class:`datetime.datetime` object or, if the
            ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the
            first element being a :class:`datetime.datetime` object, the second
            a tuple containing the fuzzy tokens.
    
        :raises ValueError:
            Raised for invalid or unknown string format, if the provided
            :class:`tzinfo` is not in a valid format, or if an invalid date
            would be created.
    
        :raises TypeError:
            Raised for non-string or character stream input.
    
        :raises OverflowError:
            Raised if the parsed date exceeds the largest valid C integer on
            your system.
        """
    
        if default is None:
            default = datetime.datetime.now().replace(hour=0, minute=0,
                                                      second=0, microsecond=0)
    
        res, skipped_tokens = self._parse(timestr, **kwargs)
    
        if res is None:
>           raise ValueError("Unknown string format")
E           ValueError: Unknown string format

.tox/py37-dateutil26/lib/python3.7/site-packages/dateutil/parser.py:559: ValueError
=========================== 1 failed in 0.07 seconds ===========================
ERROR: InvocationError for command /Users/brian/Code/dateutil-parse-test/.tox/py37-dateutil26/bin/pytest (exited with code 1)
py37-dateutil27 installed: atomicwrites==1.3.0,attrs==19.1.0,importlib-metadata==0.18,more-itertools==7.1.0,packaging==19.0,pluggy==0.12.0,py==1.8.0,pyparsing==2.4.0,pytest==5.0.1,python-dateutil==2.7.5,six==1.12.0,wcwidth==0.1.7,zipp==0.5.2
py37-dateutil27 run-test-pre: PYTHONHASHSEED='4015604952'
py37-dateutil27 run-test: commands[0] | pytest
============================= test session starts ==============================
platform darwin -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0
cachedir: .tox/py37-dateutil27/.pytest_cache
rootdir: /Users/brian/Code/dateutil-parse-test
collected 1 item

test_dateutil.py .                                                       [100%]

=========================== 1 passed in 0.01 seconds ===========================
py37-dateutil28 installed: atomicwrites==1.3.0,attrs==19.1.0,importlib-metadata==0.18,more-itertools==7.1.0,packaging==19.0,pluggy==0.12.0,py==1.8.0,pyparsing==2.4.0,pytest==5.0.1,python-dateutil==2.8.0,six==1.12.0,wcwidth==0.1.7,zipp==0.5.2
py37-dateutil28 run-test-pre: PYTHONHASHSEED='4015604952'
py37-dateutil28 run-test: commands[0] | pytest
============================= test session starts ==============================
platform darwin -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0
cachedir: .tox/py37-dateutil28/.pytest_cache
rootdir: /Users/brian/Code/dateutil-parse-test
collected 1 item

test_dateutil.py .                                                       [100%]

=========================== 1 passed in 0.01 seconds ===========================
___________________________________ summary ____________________________________
ERROR:   py36-dateutil26: commands failed
  py36-dateutil27: commands succeeded
  py36-dateutil28: commands succeeded
ERROR:   py37-dateutil26: commands failed
  py37-dateutil27: commands succeeded
  py37-dateutil28: commands succeeded
